import{y as m,n as f,T as h,z as g,j as u,a as b,o as x,c as w,_ as l,E as v,g as d,G as y,s as k,l as z,V as C,H as _,J as B,K as $}from"./main.f64dea95.js";m.ElementQueries.listen();const M={name:"ConcordanceApp",components:{TheNavbar:h,MappingBrowser:g,LoadingIndicatorFull:u},mixins:[b,x,w],data(){return{loaded:!1,loading:!1,loadFromParametersOnce:l.once(this.loadFromParameters)}},computed:{locale(){return this.$i18n.locale},settingsLocale(){return"en"}},watch:{locale(o,e){o!=e&&(this.$store.commit({type:"settings/set",prop:"locale",value:o}),l.delay(()=>{this.insertPrefLabel(!0),this.insertPrefLabel(!1)},300))},settingsLocale(o){o!=this.locale&&(this.$i18n.locale=o)}},created(){this.load()},methods:{async load(){const o=new Date;this.loadingGlobal=!0,await this.$store.dispatch("loadConfig",l.get(this.$route,"query.config")),await this.$store.dispatch("settings/load"),document.title=this.config.title,this.$i18n.locale=this.settingsLocale,await v(),this.loaded=!0,this.loadingGlobal=!1,this.loadFromParametersOnce(!0);for(let e of this.config.registries)l.isArray(e.schemes)&&(e._jskos.schemes=e.schemes.map(t=>d(t)||t));this.$log.log(`Application loaded in ${(new Date-o)/1e3} seconds.`)},async loadFromParameters(o=!1){this.loading=!0;const e=this.$route.query,t={scheme:{true:e.fromScheme,false:e.toScheme},concept:{true:e.from,false:e.to}},i=async r=>{let n=t.scheme[r],a=null;n&&(a=d({uri:n}));let c=null;a&&t.concept[r]&&(c=k({uri:t.concept[r]},{scheme:a,type:"concept"}));try{await this.setSelected({concept:c,scheme:a,isLeft:r,noQueryRefresh:!0,noLoading:!0})}catch(s){this.$log.warn(s)}},p=async()=>{if(e.mapping||e.mappingUri||e.mappingIdentifier){let r=null;if(e.mapping)try{r=this.adjustMapping(this.$jskos.normalize(JSON.parse(e.mapping)))}catch(s){this.$log.warn("Error decoding mapping from URL parameter:",s)}l.isEqual(r,{})&&(r=null);let n=[];try{e.mappingUri?n.push(await this.getMapping({uri:e.mappingUri})):e.mappingIdentifier&&(n=await this.getMappings({identifier:e.mappingIdentifier}))}catch(s){this.$log.warn("Error loading mapping from URL parameter:",s)}n=n.filter(Boolean);let a=r,c=null;n.length&&(c=n.find(s=>l.get(s,"_registry").isAuthorizedFor&&l.get(s,"_registry").isAuthorizedFor({type:"mappings",action:"create",user:this.user}))||n[0],a=a||this.adjustMapping(this.$jskos.copyDeep(c))),this.$store.commit({type:"mapping/set",mapping:a,original:c,noQueryRefresh:!0}),z(this.$jskos.conceptsOfMapping(a)),a&&o&&(this.forceMappingBrowser=!0)}};if(await Promise.all([i(!0),i(!1),p()]),this.loading=!1,y(this.$store),o)if(e.search){let r=JSON.parse(e.search);this.forceMappingBrowser=!0,this.searchMappings(r)}else e.concordances!==void 0?this.showConcordances():(e.mappingUri||e.mappingIdentifier)&&(this.forceMappingBrowser=!0,this.searchMappings())},searchMappings(o){let e=this.$refs.mappingBrowser;e&&e.searchWithParams&&e.searchWithParams(o)},showMappingSearch(){this.forceMappingBrowser=!0,this.searchMappings({})},showConcordances(){let o=this.$refs.mappingBrowser;if(!o){this.$log.warn("Could not show concordances because MappingBrowser component was not found.");return}if(o.concordancesLoaded)o.tabIndexes.concordances!=null&&(this.forceMappingBrowser=!0,o.tab=o.tabIndexes.concordances);else{this.loadingGlobal=!0;let e;e=this.$watch(()=>o.concordancesLoaded,()=>{this.loadingGlobal=!1,o.tabIndexes.concordances!=null&&(this.forceMappingBrowser=!0,o.tab=o.tabIndexes.concordances),e&&e()})}}}};var I=function(){var e=this,t=e._self._c;return t("div",{staticClass:"font-default",attrs:{id:"concordanceApp"}},[t("div",{staticClass:"alertsContainer"},e._l(e.$store.state.alerts.alerts,function(i,p){return t("b-alert",{key:p,staticStyle:{display:"flex"},attrs:{variant:i.variant,show:i.countdown||!i.shouldCountdown,dismissible:!i.shouldCountdown,fade:""},on:{dismissed:function(r){return e.$store.commit({type:"alerts/setCountdown",alert:i,countdown:0})},"dismiss-count-down":function(r){return e.$store.commit({type:"alerts/setCountdown",alert:i,countdown:r})}}},[t("div",{staticStyle:{flex:"1"},domProps:{innerHTML:e._s(i.text)}}),i.buttonText?t("div",{staticClass:"fontWeight-heavy"},[t("a",{attrs:{href:""},domProps:{innerHTML:e._s(i.buttonText)},on:{click:function(r){return r.preventDefault(),i.buttonHandler(i,r)}}})]):e._e()])}),1),e.loadingGlobal||e.loading?t("loading-indicator-full"):e._e(),e.loaded?[t("the-navbar",{ref:"navbar",attrs:{title:"Concordances",reduced:!0}}),t("div",{staticClass:"main"},[t("div",{staticClass:"flexbox-row"},[t("div",{staticClass:"mappingTool order3",attrs:{id:"mappingTool"}},[t("div",{staticClass:"mappingToolItem mainComponent visualComponent",attrs:{id:"mappingBrowserComponent"}},[t("mapping-browser",{ref:"mappingBrowser",attrs:{"show-navigator":!1,"show-editing-tools":!1,"show-registry-override":["http://coli-conc.gbv.de/registry/coli-conc-mappings"],"show-cocoda-link":!0}})],1)])])])]:e._e()],2)},S=[],A=f(M,I,S,!1,null,null,null,null),T=A.exports;new C({store:_,router:B,i18n:$,render:o=>o(T)}).$mount("#concordanceApp");
